openapi: 3.0.0
info:
  title: Week 10 Intermediate Assignment
  version: 1.0.0
  description: RESTful API with NodeJS, ExpressJS, and MongoDB
servers:
  - url: http://localhost:1369
    description: Development server
  - url: https://week10.fly.dev/
    description: Deployed server
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Bearer with JWT token"
  schemas:
    UserRegister:
      type: object
      properties:
        username:
          type: string
          minLength: 5
          example: "example"
        password:
          type: string
          minLength: 8
          pattern: "^(?=.*[a-zA-Z])(?=.*[0-9]).*$"
          example: "example123"
        role:
          type: string
          enum:
            - "maker"
            - "approver"
      required:
        - "username"
        - "role"
        - "password"
    UserLogin:
      type: object
      properties:
        username:
          type: string
          example: "example"
        password:
          type: string
          example: "example123"
    BadRequest:
      type: object
      properties:
        message:
          type: string
    ServerError:
      type: object
      properties:
        error:
          type: string
    Transactions:
      type: object
      properties:
        amount:
          type: integer
        currency:
          type: string
        sourceAccount:
          type: string
        destinationAccount:
          type: string
      required:
        - "amount"
        - "currency"
        - "sourceAccount"
        - "destinationAccount"
paths:
  /users/register:
    post:
      summary: New user registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "201":
          description: New user successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully registered"
                  data:
                    type: object
                    properties:
                      acknowledged:
                        type: boolean
                      insertedId:
                        type: string
                        example: "65300f8f418e8146882d9c4e"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
  /users/login:
    post:
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: "Successfully logged in"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged in successfully"
                  data:
                    type: string
                    example: "{--JWTAccessToken--}"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
  /transactions:
    get:
      security:
        - bearer: []
      summary: Get all transactions
      responses:
        "200":
          description: "Get all transactions"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Retrieving transactions successful"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        amount:
                          type: integer
                        currency:
                          type: string
                        sourceAccount:
                          type: string
                        destinationAccount:
                          type: string
                        status:
                          type: string
                          enum:
                            - "pending"
                            - "approved"
                            - "rejected"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
    post:
      security:
        - bearer: []
      summary: Create a new transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transactions"
      responses:
        "201":
          description: Transaction successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Transaction is waiting for approval"
                  data:
                    type: object
                    properties:
                      acknowledged:
                        type: boolean
                      insertedId:
                        type: string
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
  /transactions/approval:
    post:
      summary: Transaction approval
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                transactionId:
                  type: string
                  description: Transaction ID
                status:
                  type: string
                  enum:
                    - approved
                    - rejected
                  description: The status is only "approved" or "rejected"
      responses:
        "200":
          description: Transaction approved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerError"
